@page "/"

<PageTitle>Aggregate</PageTitle>

<h1>Multi-binding with Aggregate</h1>

<p>
	@* Using Aggregate in a member variable so that editing can be disabled when values are not equal *@
	Name:
	<input type="text" @bind-value="AggregatedName.Value" disabled="@(!AggregatedName.Equal)" />
</p>

<p>
	@* Using Aggregate inline for maximum simplicity (though this particular example is a little annoying since it shows "0" when ages don't match) *@
	Age:
	<input type="number" @bind-value="@(new Aggregate<Person, int>(people, person => person.Age, (person, value) => person.Age = value, 0).Value)" />
</p>

<p>
	@* Using Aggregate in a member variable so that Equal can be checked for setting other properties (placeholder) *@
	Country:
	<input type="text" @bind-value="AggregatedCountry.Value" placeholder="@(AggregatedCountry.Equal ? string.Empty : "(Multiple locations)")" />
</p>

<h1>Multi-binding with wrapper component</h1>

<EditForm Model="people" OnValidSubmit="CommitChanges">

<p>
	@* Using MultiInputText with IsEditableInConflict=false *@
	Name:
	<MultiInputText @ref="_name" TItem="Person" Items="people" FieldName="Name" GetValue="item => item.Name" SetValue="(item, value) => item.Name = value" ConflictValue="(Multiple names)" IsEditableInConflict="false" Required="A name is required." />
</p>
<p>
	@* Using MultiInputInteger *@
	Age:
	<MultiInputInteger @ref="_age" TItem="Person" Items="people" FieldName="Age" GetValue="item => item.Age" SetValue="(item, value) => item.Age = value" ConflictString="(Multiple ages)" Required="Age is required and must be a number." />
</p>
<p>
	@* Using MultiInputText *@
	Country:
	<MultiInputText @ref="_country" TItem="Person" Items="people" FieldName="Country" GetValue="item => item.Country" SetValue="(item, value) => item.Country = value" ConflictValue="(Multiple locations)" Required="A country is required." />
</p>
<p>
	<ValidationSummary Model="people" />
</p>
<p>
	<input type="submit" value="Commit changes" />
</p>	

</EditForm>

<h1>Ye olde people database</h1>
<p>
	The fields above are each bound to <em>all</em> of these objects:
</p>
<ul>
	@foreach (var person in people)
	{
		<li><strong>@person.Name</strong>, age @person.Age (@(person.Country ?? "unknown location"))</li>
	}
</ul>

@code
{
	MultiInputText<Person>? _name;
	MultiInputInteger<Person>? _age;
	MultiInputText<Person>? _country;

	private void CommitChanges()
	{
		_name?.CommitChanges();
		_age?.CommitChanges();
		_country?.CommitChanges();
	}

	private readonly Person[] people = new Person[]
	{
		new() { Name = "Archibald", Age = 58 },
		new() { Name = "Benedict", Age = 34 },
		new() { Name = "Charon", Age = 6101, Country = "Hades" },
		new() { Name = "Dennis", Age = 23 },
		new() { Name = "Eowyn", Age = 27, Country = "Rohan" },
	};

	private class Person
	{
		public string Name { get; set; } = string.Empty;
		public int Age { get; set; } = 0;
		public string? Country { get; set; }
	}
}
